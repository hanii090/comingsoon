import { NextRequest, NextResponse } from 'next/server'
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'

export async function POST(request: NextRequest) {
  try {
    const { deckId, format = 'markdown' } = await request.json()
    
    if (!deckId) {
      return NextResponse.json(
        { error: 'Missing deckId' }, 
        { status: 400 }
      )
    }

    const supabase = createServerComponentClient({ cookies })
    
    // Get the current user
    const { data: { user }, error: userError } = await supabase.auth.getUser()
    
    if (userError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' }, 
        { status: 401 }
      )
    }

    // Fetch the pitch deck
    const { data: deck, error: deckError } = await supabase
      .from('pitch_decks')
      .select('*')
      .eq('id', deckId)
      .eq('user_id', user.id)
      .single()

    if (deckError || !deck) {
      return NextResponse.json(
        { error: 'Pitch deck not found' }, 
        { status: 404 }
      )
    }

    // Generate export content based on format
    let exportContent = ''
    
    if (format === 'markdown') {
      exportContent = generateMarkdownExport(deck)
    } else if (format === 'text') {
      exportContent = generateTextExport(deck)
    } else {
      return NextResponse.json(
        { error: 'Unsupported format. Use "markdown" or "text"' }, 
        { status: 400 }
      )
    }

    // Return the content with appropriate headers
    const headers = new Headers()
    headers.set('Content-Type', 'text/plain; charset=utf-8')
    headers.set('Content-Disposition', `attachment; filename="${deck.title}.${format === 'markdown' ? 'md' : 'txt'}"`)

    return new NextResponse(exportContent, {
      status: 200,
      headers
    })

  } catch (error) {
    console.error('Export error:', error)
    return NextResponse.json(
      { error: 'Internal server error' }, 
      { status: 500 }
    )
  }
}

function generateMarkdownExport(deck: any): string {
  const content = deck.content || {}
  
  return `# ${deck.title}

## Slide 1: Problem
${content.problem || 'Problem statement goes here...'}

## Slide 2: Solution
${content.solution || 'Solution description goes here...'}

## Slide 3: Market Opportunity
${content.market || 'Market analysis goes here...'}

## Slide 4: Product
${content.product || 'Product details go here...'}

## Slide 5: Business Model
${content.businessModel || 'Business model goes here...'}

## Slide 6: Competition
${content.competition || 'Competitive analysis goes here...'}

## Slide 7: Marketing Strategy
${content.marketing || 'Marketing strategy goes here...'}

## Slide 8: Financial Projections
${content.financials || 'Financial projections go here...'}

## Slide 9: Team
${content.team || 'Team information goes here...'}

## Slide 10: Funding Ask
${content.funding || 'Funding requirements go here...'}

---
Generated by Foundify - AI-Powered Business Planning
`
}

function generateTextExport(deck: any): string {
  const content = deck.content || {}
  
  return `${deck.title}
${'='.repeat(deck.title.length)}

PROBLEM
-------
${content.problem || 'Problem statement goes here...'}

SOLUTION
--------
${content.solution || 'Solution description goes here...'}

MARKET OPPORTUNITY
------------------
${content.market || 'Market analysis goes here...'}

PRODUCT
-------
${content.product || 'Product details go here...'}

BUSINESS MODEL
--------------
${content.businessModel || 'Business model goes here...'}

COMPETITION
-----------
${content.competition || 'Competitive analysis goes here...'}

MARKETING STRATEGY
------------------
${content.marketing || 'Marketing strategy goes here...'}

FINANCIAL PROJECTIONS
---------------------
${content.financials || 'Financial projections go here...'}

TEAM
----
${content.team || 'Team information goes here...'}

FUNDING ASK
-----------
${content.funding || 'Funding requirements go here...'}

---
Generated by Foundify - AI-Powered Business Planning
`
}